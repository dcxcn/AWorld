import { Vertex } from './Vertex.js';
import { Face } from './Face.js';
import { Segment } from './Segment.js';
import { Edge } from './Edge.js';
import { Shape } from './Shape.js';
import { Mesh } from './Mesh.js';
var RectMesh = function(a, b) {
    for (var c = [], d = [], e = [], f = [], g = 4; g--;) e.push(new Face), c.push(new Vertex), f.push(new Segment), d.push(new Edge, new Edge, new Edge);
    g = new Shape;
    c[0].pos.set(-10, -10);
    c[1].pos.set(a + 10, -10);
    c[2].pos.set(a + 10, b + 10);
    c[3].pos.set(-10, b + 10);
    c[0].setDatas(d[0]);
    c[1].setDatas(d[2]);
    c[2].setDatas(d[4]);
    c[3].setDatas(d[6]);
    d[0].setDatas(c[0], d[1], d[2], e[3], !0, !0);
    d[1].setDatas(c[1], d[0], d[7], e[0], !0, !0);
    d[2].setDatas(c[1], d[3], d[11], e[3], !0, !0);
    d[3].setDatas(c[2],
    d[2], d[8], e[1], !0, !0);
    d[4].setDatas(c[2], d[5], d[6], e[2], !0, !0);
    d[5].setDatas(c[3], d[4], d[3], e[1], !0, !0);
    d[6].setDatas(c[3], d[7], d[10], e[2], !0, !0);
    d[7].setDatas(c[0], d[6], d[9], e[0], !0, !0);
    d[8].setDatas(c[1], d[9], d[5], e[1], !0, !1);
    d[9].setDatas(c[3], d[8], d[1], e[0], !0, !1);
    d[10].setDatas(c[0], d[11], d[4], e[2], !1, !1);
    d[11].setDatas(c[2], d[10], d[0], e[3], !1, !1);
    e[0].setDatas(d[9], !0);
    e[1].setDatas(d[8], !0);
    e[2].setDatas(d[4], !1);
    e[3].setDatas(d[2], !1);
    c[0].fromConstraintSegments = [f[0], f[3]];
    c[1].fromConstraintSegments = [f[0], f[1]];
    c[2].fromConstraintSegments = [f[1], f[2]];
    c[3].fromConstraintSegments = [f[2], f[3]];
    d[0].fromConstraintSegments.push(f[0]);
    d[1].fromConstraintSegments.push(f[0]);
    d[2].fromConstraintSegments.push(f[1]);
    d[3].fromConstraintSegments.push(f[1]);
    d[4].fromConstraintSegments.push(f[2]);
    d[5].fromConstraintSegments.push(f[2]);
    d[6].fromConstraintSegments.push(f[3]);
    d[7].fromConstraintSegments.push(f[3]);
    f[0].edges.push(d[0]);
    f[1].edges.push(d[2]);
    f[2].edges.push(d[4]);
    f[3].edges.push(d[6]);
    f[0].fromShape = g;
    f[1].fromShape = g;
    f[2].fromShape = g;
    f[3].fromShape = g;
    g.segments.push(f[0], f[1], f[2], f[3]);
    f = new Mesh(a, b);
    f._vertices = c;
    f._edges = d;
    f._faces = e;
    f._constraintShapes.push(g);
    f.clipping = !1;
    f.insertConstraintShape([0, 0, a, 0, a, 0, a, b, a, b, 0, b, 0, b, 0, 0]);
    f.clipping = !0;
    return f
};

export { RectMesh };